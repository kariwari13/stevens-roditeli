import React, { useState, useEffect, useRef } from 'react';
import { Play, Pause, Mic, MicOff, Volume2, RotateCcw, CheckCircle, XCircle, Baby, Users, MessageCircle } from 'lucide-react';

const RussianFamilyApp = () => {
  const [currentTask, setCurrentTask] = useState(null);
  const [userAnswer, setUserAnswer] = useState('');
  const [showResult, setShowResult] = useState(null);
  const [score, setScore] = useState({ correct: 0, total: 0 });
  const [isRecording, setIsRecording] = useState(false);
  const [activeTab, setActiveTab] = useState('tasks');
  const [selectedCategory, setSelectedCategory] = useState('all');
  
  const mediaRecorderRef = useRef(null);
  const audioChunksRef = useRef([]);

  // Расширенная лексика по категориям
  const vocabulary = {
    baby_care: {
      'писать-пописать': { 
        definition: 'to urinate', 
        example: 'Она пописала в памперс',
        forms: 'писать/пописать - она писает/пописает'
      },
      'какать-покакать': { 
        definition: 'to defecate', 
        example: 'Ребёнок покакал',
        forms: 'какать/покакать - он какает/покакает'
      },
      'памперс': { 
        definition: 'diaper', 
        example: 'Нужно поменять памперс',
        forms: 'памперс - памперса - памперсу - памперс - памперсом - о памперсе'
      },
      'соска': { 
        definition: 'pacifier', 
        example: 'Дай ей соску',
        forms: 'соска - соски - соске - соску - соской - о соске'
      },
      'колики': { 
        definition: 'colic', 
        example: 'У неё колики',
        forms: 'колики (только множественное число)'
      },
      'отрыжка': { 
        definition: 'burp', 
        example: 'У неё отрыжка',
        forms: 'отрыжка - отрыжки - отрыжке'
      },
      'рыгать-рыгнуть': { 
        definition: 'to burp', 
        example: 'Она сейчас рыгнёт',
        forms: 'рыгать/рыгнуть - рыгает/рыгнет'
      },
      'пелёнка': { 
        definition: 'swaddle cloth', 
        example: 'Заверни её в пелёнку',
        forms: 'пелёнка - пелёнки - пелёнке'
      },
      'люлька': { 
        definition: 'cradle', 
        example: 'Положи её в люльку',
        forms: 'люлька - люльки - люльке'
      },
      'кормление': { 
        definition: 'feeding', 
        example: 'Время кормления',
        forms: 'кормление - кормления - кормлению - кормление - кормлением - о кормлении'
      },
      'купать-выкупать': { 
        definition: 'to bathe', 
        example: 'Надо её выкупать',
        forms: 'купать/выкупать - купаю/выкупаю'
      },
      'ванночка': { 
        definition: 'baby bath', 
        example: 'Наполни ванночку тёплой водой',
        forms: 'ванночка - ванночки - ванночке'
      },
      'коляска': { 
        definition: 'stroller', 
        example: 'Возьми коляску, пойдём гулять',
        forms: 'коляска - коляски - коляске'
      },
      'температура': { 
        definition: 'temperature', 
        example: 'У неё температура',
        forms: 'температура - температуры - температуре'
      },
      'градусник': { 
        definition: 'thermometer', 
        example: 'Где градусник?',
        forms: 'градусник - градусника - градуснику'
      },
      'грудь': { 
        definition: 'breast (feeding)', 
        example: 'Она хочет грудь',
        forms: 'грудь - груди - груди - грудь - грудью - о груди'
      },
      'молоко': { 
        definition: 'milk', 
        example: 'Приготовь молоко',
        forms: 'молоко - молока - молоку'
      },
      'бутылочка': { 
        definition: 'bottle', 
        example: 'Дай ей бутылочку',
        forms: 'бутылочка - бутылочки - бутылочке'
      }
    },
    family: {
      'внучка': { 
        definition: 'granddaughter', 
        example: 'Наша любимая внучка',
        forms: 'внучка - внучки - внучке - внучку - внучкой - о внучке'
      },
      'Гульнара': { 
        definition: 'mother-in-law\'s name', 
        example: 'Гульнара играет с внучкой',
        forms: 'Гульнара - Гульнары - Гульнаре - Гульнару - Гульнарой - о Гульнаре'
      },
      'Эрик': { 
        definition: 'father-in-law\'s name', 
        example: 'Эрик помогает с ребёнком',
        forms: 'Эрик - Эрика - Эрику - Эрика - Эриком - об Эрике'
      },
      'бабушка': { 
        definition: 'grandmother', 
        example: 'Бабушка качает внучку',
        forms: 'бабушка - бабушки - бабушке - бабушку - бабушкой - о бабушке'
      },
      'дедушка': { 
        definition: 'grandfather', 
        example: 'Дедушка рассказывает сказку',
        forms: 'дедушка - дедушки - дедушке - дедушку - дедушкой - о дедушке'
      }
    },
    actions: {
      'держать-подержать': { 
        definition: 'to hold', 
        example: 'Я держу ребёнка',
        forms: 'держать/подержать - держу/подержу - держишь/подержишь'
      },
      'качать-покачать': { 
        definition: 'to rock', 
        example: 'Покачай её немного',
        forms: 'качать/покачать - качаю/покачаю'
      },
      'укладывать-уложить': { 
        definition: 'to put to bed', 
        example: 'Я её уложил спать',
        forms: 'укладывать/уложить - укладываю/уложу'
      },
      'нянчить-понянчить': { 
        definition: 'to babysit, care for', 
        example: 'Бабушка нянчит внучку',
        forms: 'нянчить/понянчить - нянчу/понянчу'
      },
      'жалеть-пожалеть': { 
        definition: 'to feel sorry for, comfort', 
        example: 'Не жалей её так',
        forms: 'жалеть/пожалеть - жалею/пожалею'
      },
      'гулять': { 
        definition: 'to go for a walk', 
        example: 'Пойдём с ней гулять',
        forms: 'гулять - гуляю - гуляешь'
      },
      'кормить-покормить': { 
        definition: 'to feed', 
        example: 'Покорми её',
        forms: 'кормить/покормить - кормлю/покормлю'
      },
      'переодевать-переодеть': { 
        definition: 'to change clothes', 
        example: 'Переодень её',
        forms: 'переодевать/переодеть - переодеваю/переодену'
      },
      'будить-разбудить': { 
        definition: 'to wake up', 
        example: 'Не буди её',
        forms: 'будить/разбудить - бужу/разбужу'
      }
    }
  };

  // Типы заданий
  const taskTypes = [
    'translation_ru_en',
    'translation_en_ru', 
    'multiple_choice',
    'fill_blanks',
    'listening',
    'speaking',
    'grammar_forms',
    'situational'
  ];

  // Примеры заданий
  const sampleTasks = [
    {
      type: 'translation_ru_en',
      category: 'baby_care',
      question: 'Переведите на английский: "Она пописала"',
      answer: 'she urinated',
      alternatives: ['she peed', 'she urinated', 'she wet herself'],
      word: 'писать-пописать'
    },
    {
      type: 'translation_en_ru',
      category: 'baby_care',
      question: 'Translate to Russian: "Change the diaper"',
      answer: 'поменяй памперс',
      alternatives: ['смени памперс', 'поменяй памперс', 'замени памперс'],
      word: 'памперс'
    },
    {
      type: 'multiple_choice',
      category: 'baby_care',
      question: 'Выберите правильный вариант: "У неё ___"',
      options: ['колика', 'колики', 'коликов', 'колике'],
      correct: 1,
      word: 'колики'
    },
    {
      type: 'multiple_choice',
      category: 'actions',
      question: 'Что правильно: "Я ___ ребёнка на руках"',
      options: ['держу', 'держаю', 'держю', 'держеву'],
      correct: 0,
      word: 'держать-подержать'
    },
    {
      type: 'fill_blanks',
      category: 'baby_care',
      question: 'Заполните пропуск: "Дай ей ___"',
      answer: 'соску',
      hint: '(предмет для сосания)',
      word: 'соска'
    },
    {
      type: 'grammar_forms',
      category: 'actions',
      question: 'Поставьте глагол в правильную форму: "Она сейчас ___ (рыгать-рыгнуть)"',
      answer: 'рыгнет',
      alternatives: ['рыгнёт', 'рыгнет'],
      word: 'рыгать-рыгнуть'
    },
    {
      type: 'situational',
      category: 'family',
      question: 'Ситуация: Гульнара спрашивает, как дела у внучки. Ответь.',
      context: 'Ребёнок только что поел и спит.',
      expectedElements: ['хорошо', 'поела', 'спит'],
      word: 'внучка'
    },
    {
      type: 'listening',
      category: 'baby_care',
      question: 'Прослушайте фразу и повторите',
      audio: 'Осторожно, она сейчас на тебя рыгнёт',
      word: 'рыгать-рыгнуть'
    }
  ];

  const generateRandomTask = () => {
    const filteredTasks = selectedCategory === 'all' 
      ? sampleTasks 
      : sampleTasks.filter(task => task.category === selectedCategory);
    
    const randomTask = filteredTasks[Math.floor(Math.random() * filteredTasks.length)];
    setCurrentTask({...randomTask, id: Date.now()});
    setUserAnswer('');
    setShowResult(null);
  };

  const checkAnswer = () => {
    if (!currentTask) return;
    
    let isCorrect = false;
    
    switch(currentTask.type) {
      case 'multiple_choice':
        isCorrect = parseInt(userAnswer) === currentTask.correct;
        break;
      case 'translation_ru_en':
      case 'translation_en_ru':
      case 'fill_blanks':
      case 'grammar_forms':
        const normalizedAnswer = userAnswer.toLowerCase().trim();
        if (currentTask.alternatives) {
          isCorrect = currentTask.alternatives.some(alt => 
            alt.toLowerCase() === normalizedAnswer
          );
        } else {
          isCorrect = normalizedAnswer === currentTask.answer.toLowerCase();
        }
        break;
      case 'situational':
        isCorrect = currentTask.expectedElements.some(element =>
          userAnswer.toLowerCase().includes(element.toLowerCase())
        );
        break;
      default:
        isCorrect = true; // Для заданий на говорение и слушание
    }
    
    setScore(prev => ({
      correct: prev.correct + (isCorrect ? 1 : 0),
      total: prev.total + 1
    }));
    
    setShowResult(isCorrect);
    
    setTimeout(() => {
      generateRandomTask();
    }, 2000);
  };

  const speakText = (text) => {
    if ('speechSynthesis' in window) {
      const utterance = new SpeechSynthesisUtterance(text);
      utterance.lang = 'ru-RU';
      utterance.rate = 0.8;
      window.speechSynthesis.speak(utterance);
    }
  };

  const startRecording = async () => {
    try {
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      const mediaRecorder = new MediaRecorder(stream);
      mediaRecorderRef.current = mediaRecorder;
      audioChunksRef.current = [];

      mediaRecorder.ondataavailable = (event) => {
        audioChunksRef.current.push(event.data);
      };

      mediaRecorder.onstop = () => {
        const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/wav' });
        // Здесь можно добавить обработку записанного аудио
        setUserAnswer('Голосовой ответ записан ✓');
      };

      mediaRecorder.start();
      setIsRecording(true);
    } catch (error) {
      console.error('Ошибка доступа к микрофону:', error);
    }
  };

  const stopRecording = () => {
    if (mediaRecorderRef.current && isRecording) {
      mediaRecorderRef.current.stop();
      mediaRecorderRef.current.stream.getTracks().forEach(track => track.stop());
      setIsRecording(false);
    }
  };

  useEffect(() => {
    generateRandomTask();
  }, [selectedCategory]);

  const renderTask = () => {
    if (!currentTask) return null;

    switch(currentTask.type) {
      case 'multiple_choice':
        return (
          <div className="space-y-4">
            <p className="text-lg font-medium">{currentTask.question}</p>
            <div className="grid grid-cols-2 gap-2">
              {currentTask.options.map((option, index) => (
                <button
                  key={index}
                  onClick={() => setUserAnswer(index.toString())}
                  className={`p-3 border rounded-lg transition-colors ${
                    userAnswer === index.toString()
                      ? 'bg-blue-500 text-white'
                      : 'bg-white hover:bg-gray-50'
                  }`}
                >
                  {option}
                </button>
              ))}
            </div>
          </div>
        );
      
      case 'listening':
        return (
          <div className="space-y-4">
            <p className="text-lg font-medium">{currentTask.question}</p>
            <button
              onClick={() => speakText(currentTask.audio)}
              className="flex items-center gap-2 bg-green-500 text-white px-4 py-2 rounded-lg hover:bg-green-600"
            >
              <Volume2 size={20} />
              Прослушать
            </button>
            <div className="flex items-center gap-2">
              <button
                onClick={isRecording ? stopRecording : startRecording}
                className={`flex items-center gap-2 px-4 py-2 rounded-lg ${
                  isRecording 
                    ? 'bg-red-500 hover:bg-red-600' 
                    : 'bg-blue-500 hover:bg-blue-600'
                } text-white`}
              >
                {isRecording ? <MicOff size={20} /> : <Mic size={20} />}
                {isRecording ? 'Остановить' : 'Записать ответ'}
              </button>
            </div>
            <p className="text-sm text-gray-600">Прослушайте фразу и повторите её вслух</p>
          </div>
        );
      
      case 'situational':
        return (
          <div className="space-y-4">
            <div className="bg-yellow-50 p-4 rounded-lg">
              <h3 className="font-semibold text-yellow-800">Ситуация:</h3>
              <p className="text-yellow-700">{currentTask.question}</p>
              {currentTask.context && (
                <p className="text-sm text-yellow-600 mt-2">
                  Контекст: {currentTask.context}
                </p>
              )}
            </div>
            <textarea
              value={userAnswer}
              onChange={(e) => setUserAnswer(e.target.value)}
              placeholder="Введите ваш ответ..."
              className="w-full p-3 border border-gray-300 rounded-lg"
              rows="3"
            />
            <div className="flex gap-2">
              <button
                onClick={isRecording ? stopRecording : startRecording}
                className={`flex items-center gap-2 px-4 py-2 rounded-lg ${
                  isRecording 
                    ? 'bg-red-500 hover:bg-red-600' 
                    : 'bg-blue-500 hover:bg-blue-600'
                } text-white`}
              >
                {isRecording ? <MicOff size={20} /> : <Mic size={20} />}
                Голосовой ответ
              </button>
            </div>
          </div>
        );
      
      default:
        return (
          <div className="space-y-4">
            <p className="text-lg font-medium">{currentTask.question}</p>
            {currentTask.hint && (
              <p className="text-sm text-gray-600">{currentTask.hint}</p>
            )}
            <input
              type="text"
              value={userAnswer}
              onChange={(e) => setUserAnswer(e.target.value)}
              placeholder="Введите ваш ответ..."
              className="w-full p-3 border border-gray-300 rounded-lg"
              onKeyPress={(e) => e.key === 'Enter' && checkAnswer()}
            />
            <div className="flex gap-2">
              <button
                onClick={isRecording ? stopRecording : startRecording}
                className={`flex items-center gap-2 px-4 py-2 rounded-lg ${
                  isRecording 
                    ? 'bg-red-500 hover:bg-red-600' 
                    : 'bg-blue-500 hover:bg-blue-600'
                } text-white`}
              >
                {isRecording ? <MicOff size={20} /> : <Mic size={20} />}
                Голосовой ответ
              </button>
            </div>
          </div>
        );
    }
  };

  const renderVocabulary = () => (
    <div className="space-y-6">
      {Object.entries(vocabulary).map(([category, words]) => (
        <div key={category} className="bg-white rounded-lg p-6 shadow-sm border">
          <h3 className="text-xl font-semibold mb-4 text-blue-600">
            {category === 'baby_care' ? '👶 Уход за ребёнком' :
             category === 'family' ? '👨‍👩‍👧‍👦 Семья' : '🤲 Действия'}
          </h3>
          <div className="grid gap-4">
            {Object.entries(words).map(([word, info]) => (
              <div key={word} className="border-l-4 border-blue-200 pl-4">
                <div className="flex items-center justify-between">
                  <h4 className="font-semibold text-lg">{word}</h4>
                  <button
                    onClick={() => speakText(word)}
                    className="text-blue-500 hover:text-blue-700"
                  >
                    <Volume2 size={20} />
                  </button>
                </div>
                <p className="text-gray-600">{info.definition}</p>
                <p className="text-green-700 italic">"{info.example}"</p>
                <p className="text-sm text-gray-500">{info.forms}</p>
              </div>
            ))}
          </div>
        </div>
      ))}
    </div>
  );

  return (
    <div className="max-w-4xl mx-auto bg-gray-50 min-h-screen">
      {/* Header */}
      <div className="bg-blue-600 text-white p-6">
        <h1 className="text-2xl font-bold flex items-center gap-2">
          <Baby size={28} />
          Подготовка к общению с русскими родственниками
        </h1>
        <p className="mt-2 opacity-90">
          Готовимся к приезду родителей жены из России
        </p>
        <div className="mt-4 flex gap-4 text-sm">
          <span>Правильно: {score.correct}</span>
          <span>Всего: {score.total}</span>
          <span>Точность: {score.total > 0 ? Math.round((score.correct / score.total) * 100) : 0}%</span>
        </div>
      </div>

      {/* Navigation */}
      <div className="flex border-b bg-white">
        <button
          onClick={() => setActiveTab('tasks')}
          className={`flex-1 p-4 text-center font-medium ${
            activeTab === 'tasks' 
              ? 'border-b-2 border-blue-500 text-blue-600' 
              : 'text-gray-600 hover:text-gray-800'
          }`}
        >
          <MessageCircle className="mx-auto mb-1" size={20} />
          Задания
        </button>
        <button
          onClick={() => setActiveTab('vocabulary')}
          className={`flex-1 p-4 text-center font-medium ${
            activeTab === 'vocabulary' 
              ? 'border-b-2 border-blue-500 text-blue-600' 
              : 'text-gray-600 hover:text-gray-800'
          }`}
        >
          <Users className="mx-auto mb-1" size={20} />
          Словарь
        </button>
      </div>

      {/* Content */}
      <div className="p-6">
        {activeTab === 'tasks' && (
          <div className="space-y-6">
            {/* Category Filter */}
            <div className="flex gap-2 flex-wrap">
              <button
                onClick={() => setSelectedCategory('all')}
                className={`px-4 py-2 rounded-lg ${
                  selectedCategory === 'all' 
                    ? 'bg-blue-500 text-white' 
                    : 'bg-white border hover:bg-gray-50'
                }`}
              >
                Все категории
              </button>
              <button
                onClick={() => setSelectedCategory('baby_care')}
                className={`px-4 py-2 rounded-lg ${
                  selectedCategory === 'baby_care' 
                    ? 'bg-blue-500 text-white' 
                    : 'bg-white border hover:bg-gray-50'
                }`}
              >
                👶 Уход за ребёнком
              </button>
              <button
                onClick={() => setSelectedCategory('family')}
                className={`px-4 py-2 rounded-lg ${
                  selectedCategory === 'family' 
                    ? 'bg-blue-500 text-white' 
                    : 'bg-white border hover:bg-gray-50'
                }`}
              >
                👨‍👩‍👧‍👦 Семья
              </button>
              <button
                onClick={() => setSelectedCategory('actions')}
                className={`px-4 py-2 rounded-lg ${
                  selectedCategory === 'actions' 
                    ? 'bg-blue-500 text-white' 
                    : 'bg-white border hover:bg-gray-50'
                }`}
              >
                🤲 Действия
              </button>
            </div>

            {/* Task Card */}
            <div className="bg-white rounded-lg p-6 shadow-sm border">
              {showResult !== null && (
                <div className={`mb-4 p-4 rounded-lg flex items-center gap-2 ${
                  showResult 
                    ? 'bg-green-100 text-green-800' 
                    : 'bg-red-100 text-red-800'
                }`}>
                  {showResult ? <CheckCircle size={20} /> : <XCircle size={20} />}
                  {showResult ? 'Правильно!' : `Неправильно. Правильный ответ: ${currentTask?.answer || 'см. варианты выше'}`}
                </div>
              )}
              
              {renderTask()}
              
              {currentTask && showResult === null && (
                <div className="mt-6 flex gap-3">
                  <button
                    onClick={checkAnswer}
                    disabled={!userAnswer.trim()}
                    className="bg-green-500 text-white px-6 py-2 rounded-lg hover:bg-green-600 disabled:bg-gray-400 disabled:cursor-not-allowed"
                  >
                    Проверить
                  </button>
                  <button
                    onClick={generateRandomTask}
                    className="bg-gray-500 text-white px-6 py-2 rounded-lg hover:bg-gray-600 flex items-center gap-2"
                  >
                    <RotateCcw size={16} />
                    Новое задание
                  </button>
                </div>
              )}
            </div>

            {/* Word Info */}
            {currentTask?.word && vocabulary[currentTask.category]?.[currentTask.word] && (
              <div className="bg-blue-50 rounded-lg p-4">
                <h3 className="font-semibold text-blue-800 mb-2">Изучаемое слово:</h3>
                <div className="text-blue-700">
                  <p className="font-medium">{currentTask.word}</p>
                  <p className="text-sm">{vocabulary[currentTask.category][currentTask.word].forms}</p>
                </div>
              </div>
            )}
          </div>
        )}

        {activeTab === 'vocabulary' && renderVocabulary()}
      </div>
    </div>
  );
};

export default RussianFamilyApp;
